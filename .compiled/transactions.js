// Generated by LiveScript 1.5.0
(function(){
  var ref$, observable, toJS, each, getTransactions, transactions, same, loadTransactions, loadAllTransactions, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
  ref$ = require('mobx'), observable = ref$.observable, toJS = ref$.toJS;
  each = require('prelude-ls').each;
  getTransactions = require('./api.ls').getTransactions;
  out$.transactions = transactions = observable([]);
  same = function(x, y){
    return (x != null ? typeof x.toUpperCase == 'function' ? x.toUpperCase() : void 8 : void 8) === (y != null ? typeof y.toUpperCase == 'function' ? y.toUpperCase() : void 8 : void 8);
  };
  loadTransactions = function(arg$, cb){
    var head, tail, address, network;
    head = arg$[0], tail = slice$.call(arg$, 1);
    if (head == null) {
      return cb(null);
    }
    address = head.address, network = head.network;
    return getTransactions({
      address: address,
      network: network
    }, function(err, data){
      var extend;
      extend = function(tx){
        return tx.type = (function(){
          switch (false) {
          case !same(tx.to, address):
            return 'IN';
          default:
            return 'OUT';
          }
        }());
      };
      if (err == null) {
        each(bind$(transactions, 'push'))(
        each(extend)(
        data));
      }
      return loadTransactions(tail, cb);
    });
  };
  out$.loadAllTransactions = loadAllTransactions = function(store, cb){
    var wallets;
    transactions.length = 0;
    wallets = store.current.account.wallets;
    return loadTransactions(wallets, cb);
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
