// Generated by LiveScript 1.6.0
(function(){
  var ref$, observable, toJS, each, map, pairsToObj, filter, getTransactions, run, task, getPendingTxs, removeTx, transactions, same, extend, transformPtx, rebuildHistory, buildLoader, loadAllTransactions, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('mobx'), observable = ref$.observable, toJS = ref$.toJS;
  ref$ = require('prelude-ls'), each = ref$.each, map = ref$.map, pairsToObj = ref$.pairsToObj, filter = ref$.filter, map = ref$.map;
  getTransactions = require('./api.ls').getTransactions;
  ref$ = require('./workflow.ls'), run = ref$.run, task = ref$.task;
  ref$ = require('./pending-tx.ls'), getPendingTxs = ref$.getPendingTxs, removeTx = ref$.removeTx;
  out$.transactions = transactions = observable([]);
  same = function(x, y){
    return (x != null ? typeof x.toUpperCase == 'function' ? x.toUpperCase() : void 8 : void 8) === (y != null ? typeof y.toUpperCase == 'function' ? y.toUpperCase() : void 8 : void 8);
  };
  extend = curry$(function(arg$, tx){
    var address, coin;
    address = arg$.address, coin = arg$.coin;
    tx.type = (function(){
      switch (false) {
      case !same(tx.to, address):
        return 'IN';
      default:
        return 'OUT';
      }
    }());
    return tx.token = coin.token;
  });
  transformPtx = function(arg$){
    var tx, amount, fee, time;
    tx = arg$[0], amount = arg$[1], fee = arg$[2], time = arg$[3];
    return {
      tx: tx,
      amount: amount,
      to: 'pending',
      url: '#',
      fee: fee,
      time: time
    };
  };
  out$.rebuildHistory = rebuildHistory = function(store, wallet, cb){
    var address, network, coin;
    address = wallet.address, network = wallet.network, coin = wallet.coin;
    return getTransactions({
      address: address,
      network: network,
      token: coin.token
    }, function(err, data){
      var ids, dummy;
      if (err != null) {
        return cb(err);
      }
      ids = map(function(it){
        return it.tx;
      })(
      data);
      dummy = function(err, data){
        return console.log(err, data);
      };
      return getPendingTxs({
        network: network,
        store: store,
        token: coin.token
      }, function(err, ptxs){
        if (err != null) {
          return cb(err);
        }
        each(function(it){
          return removeTx({
            store: store,
            token: coin.token,
            network: network,
            tx: it[0]
          }, dummy);
        })(
        filter(function(it){
          return ids.indexOf(it[0]) !== -1;
        })(
        ptxs));
        return getPendingTxs({
          network: network,
          store: store,
          token: coin.token
        }, function(err, ptxs){
          var txs;
          if (err != null) {
            return cb(err);
          }
          txs = transactions;
          each(function(it){
            return txs.splice(txs.indexOf(it), 1);
          })(
          filter(function(it){
            return it.token === coin.token;
          })(
          txs));
          each(bind$(txs, 'push'))(
          each(extend({
            address: address,
            coin: coin
          }))(
          data));
          each(bind$(txs, 'push'))(
          each(extend({
            address: address,
            coin: coin
          }))(
          map(transformPtx)(
          ptxs)));
          return cb();
        });
      });
    });
  };
  buildLoader = function(store){
    return function(wallet){
      return task(function(cb){
        return rebuildHistory(store, wallet, function(err){
          if (err != null) {
            return cb();
          }
          return cb(null);
        });
      });
    };
  };
  out$.loadAllTransactions = loadAllTransactions = function(store, cb){
    var wallets, loaders, tasks;
    wallets = store.current.account.wallets;
    loaders = map(buildLoader(store))(
    wallets);
    tasks = pairsToObj(
    map(function(it){
      return [loaders.indexOf(it).toString(), it];
    })(
    loaders));
    return run([tasks]).then(cb);
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
