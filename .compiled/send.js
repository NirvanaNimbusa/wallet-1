// Generated by LiveScript 1.6.0
(function(){
  var react, toJS, sendFuncs, map, buildSendOption, formGroup, send;
  react = require('react');
  toJS = require('mobx').toJS;
  sendFuncs = require('./send-funcs.ls');
  map = require('prelude-ls').map;
  buildSendOption = curry$(function(arg$, option){
    var store, changeAmount, send, chosen, selectOption;
    store = arg$.store, changeAmount = arg$.changeAmount;
    send = store.current.send;
    chosen = (function(){
      switch (false) {
      case option !== send.txType:
        return 'chosen';
      default:
        return "";
      }
    }());
    selectOption = function(){
      send.txType = option;
      return changeAmount(store, send.amountSend);
    };
    return react.createElement('div', {
      onClick: selectOption,
      className: chosen + " switch"
    }, ' ' + option.toUpperCase());
  });
  formGroup = function(title, content){
    var children;
    return react.createElement('div', {
      className: 'form-group'
    }, children = [
      react.createElement('label', {
        className: 'control-label'
      }, ' ' + title), content()
    ]);
  };
  send = function(arg$){
    var store, ref$, token, feeToken, network, send, wallet, pending, primaryButtonStyle, recipientChange, amountChange, amountUsdChange, useMaxAmount, showData, showLabel, topup, history, receive, cancel, sendAnyway, chooseAuto, chooseCheap, chosenAuto, chosenCheap, getAddressLink, getAddressTitle, defaultButtonStyle, round5edit, round5, sendOptions, sendTitle, isData, encodeDecode, changeAmount, children;
    store = arg$.store;
    ref$ = sendFuncs(store), token = ref$.token, feeToken = ref$.feeToken, network = ref$.network, send = ref$.send, wallet = ref$.wallet, pending = ref$.pending, primaryButtonStyle = ref$.primaryButtonStyle, recipientChange = ref$.recipientChange, amountChange = ref$.amountChange, amountUsdChange = ref$.amountUsdChange, useMaxAmount = ref$.useMaxAmount, showData = ref$.showData, showLabel = ref$.showLabel, topup = ref$.topup, history = ref$.history, receive = ref$.receive, cancel = ref$.cancel, sendAnyway = ref$.sendAnyway, chooseAuto = ref$.chooseAuto, chooseCheap = ref$.chooseCheap, chosenAuto = ref$.chosenAuto, chosenCheap = ref$.chosenCheap, getAddressLink = ref$.getAddressLink, getAddressTitle = ref$.getAddressTitle, defaultButtonStyle = ref$.defaultButtonStyle, round5edit = ref$.round5edit, round5 = ref$.round5, sendOptions = ref$.sendOptions, sendTitle = ref$.sendTitle, isData = ref$.isData, encodeDecode = ref$.encodeDecode, changeAmount = ref$.changeAmount;
    return react.createElement('div', {
      className: 'content content342489615'
    }, children = [
      react.createElement('div', {
        className: 'decoration'
      }), react.createElement('div', {
        className: 'content-body'
      }, children = [
        react.createElement('div', {
          className: 'header'
        }, children = [
          react.createElement('span', {
            className: 'head'
          }, ' ' + token + network + ' WALLET'), react.createElement('span', {
            className: 'head right'
          }, children = react.createElement('img', {
            src: send.coin.image + ""
          }))
        ]), react.createElement('form', {}, children = [
          formGroup('Send From', function(){
            var children;
            return react.createElement('div', {
              className: 'address'
            }, children = react.createElement('a', {
              href: getAddressLink(wallet) + ""
            }, ' ' + getAddressTitle(wallet)));
          }), formGroup('Recipient', function(){
            return react.createElement('input', {
              type: 'text',
              onChange: recipientChange,
              value: send.to + "",
              placeholder: store.current.sendToMask + ""
            });
          }), formGroup('Amount', function(){
            var children;
            return react.createElement('div', {}, children = [
              react.createElement('div', {
                className: 'amount-field'
              }, children = [
                react.createElement('div', {
                  className: 'input-wrapper'
                }, children = [
                  react.createElement('div', {
                    className: 'label crypto'
                  }, ' ' + token), react.createElement('input', {
                    type: 'text',
                    onChange: amountChange,
                    placeholder: "0",
                    value: round5edit(send.amountSend) + "",
                    className: 'amount'
                  })
                ]), react.createElement('div', {
                  className: 'input-wrapper'
                }, children = [
                  react.createElement('div', {
                    className: 'label lusd'
                  }, ' $'), react.createElement('input', {
                    type: 'text',
                    onChange: amountUsdChange,
                    placeholder: "0",
                    value: round5edit(send.amountSendUsd) + "",
                    className: 'amount-usd'
                  })
                ])
              ]), react.createElement('div', {
                className: 'usd'
              }, children = [
                react.createElement('span', {
                  onClick: useMaxAmount,
                  className: 'send-all'
                }, ' USE MAX'), react.createElement('span', {}, ' Balance'), react.createElement('span', {
                  className: 'balance'
                }, children = [
                  react.createElement('span', {}, ' ' + wallet.balance + ' ' + token), +wallet.pendingSent > 0 ? react.createElement('span', {
                    className: 'pending'
                  }, ' - ' + pending + ' pending') : void 8
                ])
              ]), react.createElement('div', {
                title: send.error + "",
                className: 'control-label not-enough text-left'
              }, ' ' + send.error)
            ]);
          }), isData ? formGroup('Data', function(){
            var children;
            return react.createElement('div', {}, children = [
              react.createElement('input', {
                readOnly: "readonly",
                value: showData() + ""
              }), react.createElement('button', {
                type: "button",
                onClick: encodeDecode
              }, ' Show ' + showLabel())
            ]);
          }) : void 8, react.createElement('table', {}, children = react.createElement('tbody', {}, children = [
            react.createElement('tr', {}, children = [
              react.createElement('td', {}, ' You Spend '), react.createElement('td', {}, children = [
                react.createElement('div', {}, ' ' + round5(send.amountCharged) + '  ' + token), react.createElement('div', {
                  className: 'usd'
                }, ' $ ' + round5(send.amountChargedUsd))
              ])
            ]), react.createElement('tr', {
              className: 'green'
            }, children = [
              react.createElement('td', {}, ' Recipient Obtains'), react.createElement('td', {}, children = [
                react.createElement('div', {
                  className: 'bold'
                }, ' ' + round5(send.amountObtain) + '  ' + token), react.createElement('div', {
                  className: 'usd'
                }, ' $ ' + round5(send.amountObtainUsd))
              ])
            ]), react.createElement('tr', {
              className: 'orange'
            }, children = [
              react.createElement('td', {}, ' Transaction Fee'), react.createElement('td', {}, children = [
                react.createElement('div', {}, ' ' + round5(send.amountSendFee) + '  ' + feeToken), react.createElement('div', {
                  className: 'usd'
                }, ' $ ' + round5(send.amountSendFeeUsd))
              ])
            ])
          ])), react.createElement('div', {
            className: 'fast-cheap'
          }, children = [
            map(buildSendOption({
              store: store,
              changeAmount: changeAmount
            }))(
            sendOptions), react.createElement('div', {
              className: 'space'
            }), react.createElement('div', {
              onClick: chooseAuto,
              className: chosenAuto + " switch"
            }, ' AUTO'), react.createElement('div', {
              onClick: chooseCheap,
              className: chosenCheap + " switch"
            }, ' CHEAP')
          ]), react.createElement('div', {
            className: 'escrow'
          }, children = send.proposeEscrow ? react.createElement('div', {}, ' You can send this funds to the Ethnamed smart-contract. Once the owner register the name he will obtain funds automatically') : void 8)
        ]), react.createElement('div', {
          className: 'button-container'
        }, children = react.createElement('div', {
          className: 'buttons'
        }, children = [
          react.createElement('a', {
            onClick: sendAnyway,
            style: primaryButtonStyle,
            className: 'btn btn-primary'
          }, children = [react.createElement('span', {}, ' ' + sendTitle), send.sending ? react.createElement('span', {}, ' ...') : void 8]), react.createElement('a', {
            onClick: cancel,
            style: defaultButtonStyle,
            className: 'btn btn-default'
          }, ' CANCEL')
        ]))
      ]), !isData ? react.createElement('div', {
        className: 'more-buttons'
      }, children = [
        react.createElement('a', {
          onClick: receive,
          className: 'more receive'
        }, ' RECEIVE'), react.createElement('a', {
          onClick: history,
          className: 'more history'
        }, ' HISTORY'), react.createElement('a', {
          onClick: topup,
          className: 'more history'
        }, ' TOPUP')
      ]) : void 8
    ]);
  };
  module.exports = send;
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
