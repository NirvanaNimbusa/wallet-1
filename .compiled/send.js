// Generated by LiveScript 1.5.0
(function(){
  var react, toJS, ref$, times, minus, createTransaction, pushTx, changeAmount, notifyFormResult, send;
  react = require('react');
  toJS = require('mobx').toJS;
  ref$ = require('./math.ls'), times = ref$.times, minus = ref$.minus;
  ref$ = require('./api.ls'), createTransaction = ref$.createTransaction, pushTx = ref$.pushTx;
  changeAmount = require('./change-amount.ls');
  notifyFormResult = require('./send-form.ls').notifyFormResult;
  send = function(arg$){
    var store, send, wallet, link, performSend, sendMoney, cancel, recepientChange, amountChange, encodeDecode, showData, showLabel, whenEmpty, children, ref$;
    store = arg$.store;
    if (store == null) {
      return null;
    }
    send = store.current.send;
    wallet = send.network.wallet;
    link = send.network.api.url + "/address/" + send.address;
    performSend = function(cb){
      var tx;
      tx = {
        sender: {
          address: wallet.address,
          privateKey: wallet.privateKey
        },
        recepient: send.to,
        network: send.network,
        amount: send.amountSend,
        amountFee: send.amountSendFee,
        data: send.data
      };
      return createTransaction(tx, function(err, data){
        var agree;
        if (err != null) {
          return cb(err);
        }
        agree = confirm("Are you sure to send " + tx.amount + " " + send.network.token + " to " + send.to);
        if (!agree) {
          return cb("You are not agree");
        }
        return pushTx((import$({
          network: send.network
        }, data)), function(err, tx){
          return cb(err, tx);
        });
      });
    };
    sendMoney = function(event){
      if (send.sending === true) {
        return;
      }
      send.sending = true;
      return performSend(function(err, data){
        var ref$;
        send.sending = false;
        if (err != null) {
          return send.error = (ref$ = err.message) != null ? ref$ : err;
        }
        return notifyFormResult(send.id, null, data);
      });
    };
    cancel = function(event){
      store.current.page = 'wallets';
      return notifyFormResult(send.id, "Cancelled by user");
    };
    recepientChange = function(event){
      var ref$;
      return send.to = (ref$ = event.target.value) != null ? ref$ : "";
    };
    amountChange = function(event){
      var amountSend, ref$;
      amountSend = (ref$ = event.target.value.match(/^[0-9]+$/)) != null ? ref$[0] : void 8;
      return changeAmount(store, amountSend);
    };
    encodeDecode = function(){
      return send.showDataMode = (function(){
        switch (false) {
        case send.showDataMode !== 'decoded':
          return 'encoded';
        default:
          return 'decoded';
        }
      }());
    };
    showData = function(){
      switch (false) {
      case send.showDataMode !== 'decoded':
        return send.decodedData;
      default:
        return send.data;
      }
    };
    showLabel = function(){
      if (send.showDataMode === 'decoded') {
        return 'encoded';
      } else {
        return 'decoded';
      }
    };
    whenEmpty = function(str, def){
      if ((str != null ? str : "").length === 0) {
        return def;
      } else {
        return str;
      }
    };
    return react.createElement('div', {
      className: 'content content1871139591'
    }, children = [
      react.createElement('div', {}, children = [
        react.createElement('h2', {
          className: 'font-light m-b-xs'
        }, children = [
          react.createElement('img', {
            src: wallet.network.image + "",
            className: 'head'
          }), react.createElement('span', {
            className: 'head'
          }, children = [
            react.createElement('div', {
              className: 'title'
            }, ' ' + send.network.token.toUpperCase() + ' WALLET'), react.createElement('div', {
              className: 'from'
            }, ' Send from')
          ])
        ]), react.createElement('div', {
          className: 'address'
        }, children = react.createElement('a', {
          href: link + ""
        }, ' ' + wallet.address))
      ]), react.createElement('div', {}, children = react.createElement('form', {
        method: 'get'
      }, children = [
        react.createElement('div', {
          className: 'form-group'
        }, children = [
          react.createElement('label', {
            className: 'control-label'
          }, ' Recepient'), react.createElement('div', {}, children = react.createElement('input', {
            type: 'text',
            onChange: recepientChange,
            value: send.to + "",
            placeholder: send.network.mask + ""
          }))
        ]), react.createElement('div', {
          className: 'hr-line-dashed'
        }), react.createElement('div', {
          className: 'form-group'
        }, children = [
          react.createElement('label', {
            className: 'control-label'
          }, children = react.createElement('span', {}, ' Amount')), react.createElement('div', {}, children = [
            react.createElement('input', {
              type: 'text',
              onChange: amountChange,
              placeholder: "0",
              value: send.amountSend + "",
              className: 'amount'
            }), react.createElement('div', {
              className: 'usd'
            }, ' Balance ' + wallet.balance)
          ]), send.error ? react.createElement('div', {
            className: 'control-label not-enough text-left'
          }, ' ' + send.error) : void 8
        ]), ((ref$ = send.data) != null ? ref$ : "").length > 0 ? react.createElement('div', {
          className: 'form-group'
        }, children = [
          react.createElement('label', {
            className: 'control-label'
          }, children = [
            react.createElement('span', {}, ' Data'), react.createElement('span', {
              className: 'gray'
            })
          ]), react.createElement('div', {}, children = [
            react.createElement('input', {
              readOnly: "readonly",
              value: showData() + ""
            }), react.createElement('button', {
              type: "button",
              onClick: encodeDecode
            }, ' Show ' + showLabel())
          ])
        ]) : void 8, react.createElement('div', {}, children = react.createElement('table', {
          className: 'table table-striped'
        }, children = react.createElement('tbody', {}, children = [
          react.createElement('tr', {}, children = [
            react.createElement('td', {}, ' You Send '), react.createElement('td', {}, children = [
              react.createElement('div', {}, ' ' + whenEmpty(send.amountSend, 0)), react.createElement('div', {
                className: 'usd'
              }, ' ' + send.amountSendUsd + ' USD')
            ])
          ]), react.createElement('tr', {
            className: 'green'
          }, children = [
            react.createElement('td', {}, ' Recepient obtains'), react.createElement('td', {}, children = [
              react.createElement('div', {
                className: 'bold'
              }, ' ' + send.amountObtain + '  ' + send.network.token), react.createElement('div', {
                className: 'usd'
              }, ' ' + send.amountObtainUsd + ' USD')
            ])
          ]), react.createElement('tr', {
            className: 'orange'
          }, children = [
            react.createElement('td', {}, ' Transaction Fee '), react.createElement('td', {}, children = [
              react.createElement('div', {}, ' ' + send.amountSendFee + '  ' + send.network.token), react.createElement('div', {
                className: 'usd'
              }, ' ' + send.amountSendFeeUsd + ' USD')
            ])
          ])
        ]))), react.createElement('div', {
          className: 'buttons'
        }, children = react.createElement('div', {}, children = [
          react.createElement('a', {
            onClick: sendMoney,
            className: 'btn btn-primary'
          }, children = [react.createElement('span', {}, ' Send'), send.sending ? react.createElement('span', {}, ' ...') : void 8]), react.createElement('a', {
            onClick: cancel,
            className: 'btn btn-default'
          }, ' Cancel')
        ]))
      ]))
    ]);
  };
  module.exports = send;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
