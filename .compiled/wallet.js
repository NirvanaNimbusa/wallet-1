// Generated by LiveScript 1.6.0
(function(){
  var react, ref$, cut, money, each, web3, CopyToClipboard, copiedInform, copy, round5, getPrimaryInfo, getAddressLink, getAddressTitle;
  react = require('react');
  ref$ = require('./tools.ls'), cut = ref$.cut, money = ref$.money;
  each = require('prelude-ls').each;
  web3 = require('./web3.ls');
  CopyToClipboard = require('react-copy-to-clipboard').CopyToClipboard;
  copiedInform = require('./copied-inform.ls');
  copy = require('./copy.ls');
  round5 = require('./round5.ls');
  getPrimaryInfo = require('./get-primary-info.ls');
  ref$ = require('./address-link.ls'), getAddressLink = ref$.getAddressLink, getAddressTitle = ref$.getAddressTitle;
  module.exports = curry$(function(store, wallets, wallet){
    var index, type, lweb3, send, usdRate, ref$, expand, active, big, balance, pending, buttonStyle, children;
    index = wallets.indexOf(wallet);
    type = (function(){
      switch (false) {
      case index !== 0:
        return 'top';
      case index + 1 !== wallets.length:
        return 'bottom';
      default:
        return 'middle';
      }
    }());
    if (store == null || wallet == null) {
      return null;
    }
    lweb3 = web3(store);
    send = curry$(function(wallet, event){
      var sendTransaction, to, value;
      if (wallet == null) {
        return alert("Not yet loaded");
      }
      sendTransaction = lweb3[wallet.coin.token].sendTransaction;
      to = "";
      value = 0;
      return sendTransaction({
        to: to,
        value: value
      }, function(err){
        if (err != null) {
          return console.log(err);
        }
      });
    });
    usdRate = (ref$ = wallet != null ? wallet.usdRate : void 8) != null ? ref$ : 0;
    expand = function(){
      return store.current.walletIndex = index;
    };
    active = index === store.current.walletIndex ? 'active' : '';
    big = (function(){
      switch (false) {
      case index !== store.current.walletIndex:
        return 'big';
      case !(wallets.length < 3):
        return 'big';
      default:
        return "";
      }
    }());
    balance = round5(wallet.balance) + ' ' + wallet.coin.token.toUpperCase();
    pending = round5(wallet.pendingSent) + ' ' + wallet.coin.token.toUpperCase();
    buttonStyle = {
      color: getPrimaryInfo(store).color
    };
    return react.createElement('div', {
      onClick: expand,
      key: wallet.coin.token + "",
      className: (active + ' ' + big) + " wallet wallet183800567"
    }, children = [
      react.createElement('div', {
        className: 'wallet-top'
      }, children = [
        react.createElement('div', {
          className: 'top-left'
        }, children = [
          react.createElement('div', {
            className: 'img'
          }, children = react.createElement('img', {
            src: wallet.coin.image + ""
          })), react.createElement('div', {
            className: 'info'
          }, children = [
            react.createElement('div', {
              className: 'name'
            }, ' PRICE'), react.createElement('div', {
              className: 'price'
            }, ' $' + money(usdRate))
          ])
        ]), react.createElement('div', {
          className: 'top-middle'
        }, children = [
          +wallet.pendingSent === 0 ? react.createElement('div', {
            className: 'balance title'
          }, ' Balance') : void 8, react.createElement('div', {
            className: 'balance'
          }, children = [
            react.createElement('div', {}, ' ' + balance), +wallet.pendingSent > 0 ? react.createElement('div', {
              className: 'pending'
            }, children = react.createElement('span', {}, ' -' + pending + ' pending')) : void 8
          ])
        ]), react.createElement('div', {
          className: 'top-right'
        }, children = react.createElement('button', {
          onClick: send(wallet),
          style: buttonStyle
        }, ' Open'))
      ]), react.createElement('div', {
        className: 'wallet-middle'
      }, children = [
        react.createElement('a', {
          target: "_blank",
          href: getAddressLink(wallet) + ""
        }, ' ' + getAddressTitle(wallet)), react.createElement(CopyToClipboard, {
          text: getAddressTitle(wallet) + "",
          onCopy: copiedInform(store)
        }, children = copy(store))
      ])
    ]);
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
