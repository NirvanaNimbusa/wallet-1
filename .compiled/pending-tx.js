// Generated by LiveScript 1.6.0
(function(){
  var localStorage, jsonParse, api, moment, set, getAll, getOne, removeTx, getPendingTxs, getName, createPendingTx, out$ = typeof exports != 'undefined' && exports || this, toString$ = {}.toString;
  localStorage = require('localStorage');
  jsonParse = require('./json-parse.ls');
  api = require('./api.ls');
  moment = require('moment');
  set = function(config, arr, cb){
    var name, value;
    name = getName(config);
    value = JSON.stringify(arr);
    localStorage.setItem(name, value);
    return cb(null);
  };
  getAll = function(config, cb){
    var name, data, ref$;
    name = getName(config);
    data = (ref$ = localStorage.getItem(name)) != null ? ref$ : "[]";
    return jsonParse(data, function(err, arr){
      if (err != null) {
        return cb(err);
      }
      return cb(null, arr);
    });
  };
  getOne = function(config, cb){
    if (config.tx == null) {
      return cb("tx is required");
    }
    return getAll(config, function(err, arr){
      var index;
      if (err != null) {
        return cb(err);
      }
      index = arr.map(function(it){
        return it[0];
      }).indexOf(config.tx);
      if (index === -1) {
        return cb("not found");
      }
      return cb(null, arr[index]);
    });
  };
  out$.removeTx = removeTx = function(config, cb){
    if (config.network == null) {
      return cb("network is required");
    }
    if (config.store == null) {
      return cb("store is required");
    }
    if (config.token == null) {
      return cb("token is required");
    }
    if (config.tx == null) {
      return cb("tx is required");
    }
    return getAll(config, function(err, arr){
      var index;
      if (err != null) {
        return cb(err);
      }
      if (arr.length === 0) {
        return cb("empty array");
      }
      index = arr.map(function(it){
        return it[0];
      }).indexOf(config.tx);
      if (index === -1) {
        return cb("not found");
      }
      arr.splice(index, 1);
      return set(config, arr, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null, 'done');
      });
    });
  };
  out$.getPendingTxs = getPendingTxs = function(config, cb){
    return getAll(config, function(err, arr){
      return cb(null, arr);
    });
  };
  getName = function(arg$){
    var network, store, token, mode;
    network = arg$.network, store = arg$.store, token = arg$.token;
    mode = store.current.network;
    return "ptx-" + mode + "-" + token;
  };
  out$.createPendingTx = createPendingTx = function(config, cb){
    var store, network, token, tx, amountSend, amountSendFee;
    store = config.store, network = config.network, token = config.token, tx = config.tx, amountSend = config.amountSend, amountSendFee = config.amountSendFee;
    console.log(config);
    if (toString$.call(token).slice(8, -1) !== 'String') {
      return cb("token is required");
    }
    if (toString$.call(store).slice(8, -1) !== 'Object') {
      return cb("store is required");
    }
    if (toString$.call(network).slice(8, -1) !== 'Object') {
      return cb("network is required");
    }
    if (toString$.call(tx).slice(8, -1) !== 'String') {
      return cb("tx is required");
    }
    if (toString$.call(cb).slice(8, -1) !== 'Function') {
      return cb("callback is required");
    }
    return getAll(config, function(err, arr){
      var now;
      if (err != null) {
        return cb(err);
      }
      now = moment().unix();
      arr.push([tx, amountSend, amountSendFee, now]);
      return set(config, arr, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null);
      });
    });
  };
}).call(this);
