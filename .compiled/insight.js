// Generated by LiveScript 1.5.0
(function(){
  var moment, ref$, map, foldl, any, each, get, post, plus, minus, div, BitcoinLib, extend, getOutputs, createTransaction, pushTx, getBalance, transformTx, getTransactions, out$ = typeof exports != 'undefined' && exports || this;
  moment = require('moment');
  ref$ = require('prelude-ls'), map = ref$.map, foldl = ref$.foldl, any = ref$.any, each = ref$.each;
  ref$ = require('superagent'), get = ref$.get, post = ref$.post;
  ref$ = require('../math.ls'), plus = ref$.plus, minus = ref$.minus, div = ref$.div;
  BitcoinLib = require('bitcoinjs-lib');
  extend = curry$(function(add, json){
    return import$(json, add);
  });
  getOutputs = curry$(function(arg$, cb){
    var network, address, url;
    network = arg$.network, address = arg$.address;
    url = network.api.url;
    return get(url + "/api/addr/" + address + "/utxo").then(function(body){
      return function(it){
        return cb(null, it);
      }(
      map(extend({
        network: network,
        address: address
      }))(
      each(function(it){
        return it.value = it.satoshis;
      })(
      JSON.parse(
      body.text))));
    });
  });
  out$.createTransaction = createTransaction = function(arg$, cb){
    var network, sender, recepient, amount, amountFee;
    network = arg$.network, sender = arg$.sender, recepient = arg$.recepient, amount = arg$.amount, amountFee = arg$.amountFee;
    return getOutputs({
      network: network,
      address: sender.address
    }, function(err, outputs){
      var isNoValue, total, tx, rest, apply, sign, rawtx, this$ = this;
      if (err != null) {
        return cb(err);
      }
      if (outputs.length === 0) {
        return cb('Not Enough Funds (Unspent Outputs)');
      }
      isNoValue = p.find(function(it){
        return it.value == null;
      })(
      outputs);
      if (isNoValue) {
        return cb('Each output should have a value');
      }
      total = p.sum(
      p.map(function(it){
        return it.value;
      })(
      outputs));
      if (isNaN(total)) {
        return cb('Total is NaN');
      }
      tx = new BitcoinLib.TransactionBuilder(network);
      rest = minus(minus(total, amount), amountFee);
      tx.addOutput(recepient, amount);
      tx.addOutput(sender.address, rest);
      apply = function(output, i){
        return tx.addInput(output.txid, output.vout);
      };
      sign = function(output, i){
        var key;
        key = BitcoinLib.ECPair.fromWIF(from.privateKey, network);
        return tx.sign(i, key);
      };
      outputs.forEach(apply);
      outputs.forEach(sign);
      rawtx = tx.build().toHex();
      cb(null, {
        rawtx: rawtx
      });
    });
  };
  out$.pushTx = pushTx = curry$(function(arg$, cb){
    var network, rawtx, url;
    network = arg$.network, rawtx = arg$.rawtx;
    url = network.api.url;
    return post(url + "/api/tx/send", {
      rawtx: rawtx
    }).then(function(body){
      cb(body);
    });
  });
  out$.getBalance = getBalance = function(arg$, cb){
    var address, network, ref$;
    address = arg$.address, network = arg$.network;
    if ((network != null ? (ref$ = network.api) != null ? ref$.url : void 8 : void 8) == null) {
      return cb("Url is not defined");
    }
    return get(network.api.url + "/api/addr/" + address + "/balance").end(function(err, data){
      var num;
      if (err != null || data.text.length === 0) {
        return cb(err);
      }
      num = div(data.text, 100000000);
      cb(null, num);
    });
  };
  transformTx = curry$(function(net, t){
    var sameValue, network, tx, time, amount, fee, ref$, to, ref1$, ref2$, url;
    sameValue = function(out){
      return parseFloat(minus(out.value, t.valueOut)) === 0;
    };
    network = net.token;
    tx = t.txid;
    time = t.time;
    amount = t.valueOut;
    fee = (ref$ = t.fees) != null ? ref$ : 0;
    to = (ref$ = t.vout) != null ? typeof ref$.filter == 'function' ? (ref1$ = ref$.filter(sameValue)) != null ? (ref2$ = ref1$.map(function(it){
      var ref$, ref1$;
      return (ref$ = it.scriptPubKey) != null ? (ref1$ = ref$.addresses) != null ? ref1$[0] : void 8 : void 8;
    })) != null ? ref2$[0] : void 8 : void 8 : void 8 : void 8;
    url = net.api.url + "/tx/" + tx;
    return {
      network: network,
      tx: tx,
      amount: amount,
      fee: fee,
      time: time,
      url: url,
      to: to
    };
  });
  out$.getTransactions = getTransactions = function(arg$, cb){
    var network, address, ref$;
    network = arg$.network, address = arg$.address;
    if ((network != null ? (ref$ = network.api) != null ? ref$.url : void 8 : void 8) == null) {
      return cb("Url is not defined");
    }
    return get(network.api.url + "/api/txs/?address=" + address).end(function(err, data){
      var txs;
      if (err != null) {
        return cb(err);
      }
      txs = map(transformTx(network))(
      JSON.parse(data.text).txs);
      cb(null, txs);
    });
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
