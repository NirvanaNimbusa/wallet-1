// Generated by LiveScript 1.6.0
(function(){
  var ref$, setItem, getItem, any, requiredFields, notIn, verifyPlugin, getRegistry, saveRegistry, addToRegistry, removeFromRegistry, buildInstall, toString$ = {}.toString;
  ref$ = require('localStorage'), setItem = ref$.setItem, getItem = ref$.getItem;
  any = require('prelude-ls').any;
  requiredFields = ['type', 'token', 'enabled'];
  notIn = function(arr, arr2){
    return any(function(it){
      return arr2.indexOf(it) === -1;
    })(
    arr);
  };
  verifyPlugin = function(plugin, cb){
    if (toString$.call(plugin).slice(8, -1) !== 'Object') {
      return cb("Expected Object");
    }
    if (notIn(requiredFields, Object.keys(plugin))) {
      return cb("Required fields: " + requiredFields.join(', '));
    }
    return cb(null);
  };
  getRegistry = function(){
    var registryString, ref$;
    registryString = (ref$ = getItem('plugin-registry')) != null ? ref$ : "[]";
    return JSON.parse(registryString);
  };
  saveRegistry = function(registry){
    var resultedString;
    resultedString = JSON.stringify(registry);
    return setItem(name, resultedString);
  };
  addToRegistry = function(name){
    var registry;
    registry = getRegistry();
    if (registry.indexOf(name) > -1) {
      return;
    }
    registry.push(name);
    return saveRegistry(registry);
  };
  removeFromRegistry = function(name){
    var registry, index;
    registry = getRegistry();
    index = registry.indexOf(name) === -1;
    if (index === -1) {
      return;
    }
    registry.splice(index, 1);
    return saveRegistry(registry);
  };
  buildInstall = function(cweb3, store){
    return function(plugin, cb){
      return verifyPlugin(plugin, function(err){
        if (err != null) {
          return cb(err);
        }
        return askUser(cweb3, store, plugin, function(err){
          var name, body;
          if (err != null) {
            return cb(err);
          }
          name = "plugin-" + plugin.token;
          body = JSON.stringify(plugin);
          return setItem(name, body);
        });
      });
    };
  };
  module.exports = buildInstall;
}).call(this);
