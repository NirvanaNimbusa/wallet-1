// Generated by LiveScript 1.6.0
(function(){
  var stringify, ref$, filter, map, foldl, each, plus, minus, times, div, get, Web3, Tx, BN, jsonParse, getFullpairByIndex, deadline, calcFee, getKeys, toHex, transformTx, getTransactions, getWeb3, getDec, createTransaction, checkDecodedData, pushTx, getBalance, out$ = typeof exports != 'undefined' && exports || this, toString$ = {}.toString;
  stringify = require('qs').stringify;
  ref$ = require('prelude-ls'), filter = ref$.filter, map = ref$.map, foldl = ref$.foldl, each = ref$.each;
  ref$ = require('../math.ls'), plus = ref$.plus, minus = ref$.minus, times = ref$.times, div = ref$.div;
  get = require('superagent').get;
  Web3 = require('web3');
  Tx = require('ethereumjs-tx');
  BN = require('ethereumjs-util').BN;
  jsonParse = require('../json-parse.ls');
  getFullpairByIndex = require('whitebox').getFullpairByIndex;
  deadline = require('../deadline.ls');
  out$.calcFee = calcFee = function(arg$, cb){
    var network, tx;
    network = arg$.network, tx = arg$.tx;
    return cb(null);
  };
  out$.getKeys = getKeys = function(arg$, cb){
    var network, mnemonic, index, result;
    network = arg$.network, mnemonic = arg$.mnemonic, index = arg$.index;
    result = getFullpairByIndex(mnemonic, index, network);
    return cb(null, result);
  };
  toHex = function(it){
    return new BN(it);
  };
  transformTx = curry$(function(network, t){
    var url, dec, tx, amount, time, fee;
    url = network.api.url;
    dec = getDec(network);
    network = 'eth';
    tx = t.hash;
    amount = div(t.value, dec);
    console.log(t.value, dec);
    time = t.timeStamp;
    url = url + "/tx/" + tx;
    fee = div(times(t.cumulativeGasUsed, t.gasPrice), dec);
    return {
      network: network,
      tx: tx,
      amount: amount,
      fee: fee,
      time: time,
      url: url,
      from: t.from,
      to: t.to
    };
  });
  out$.getTransactions = getTransactions = function(arg$, cb){
    var network, address, apiUrl, module, action, startblock, endblock, sort, apikey, query;
    network = arg$.network, address = arg$.address;
    apiUrl = network.api.apiUrl;
    module = 'account';
    action = 'txlist';
    startblock = 0;
    endblock = 99999999;
    sort = 'asc';
    apikey = '4TNDAGS373T78YJDYBFH32ADXPVRMXZEIG';
    query = stringify({
      module: module,
      action: action,
      apikey: apikey,
      address: address,
      sort: sort,
      startblock: startblock,
      endblock: endblock
    });
    return get(apiUrl + "?" + query).timeout({
      deadline: deadline
    }).end(function(err, resp){
      if (err != null) {
        return cb(err);
      }
      return jsonParse(resp.text, function(err, result){
        var txs;
        if (err != null) {
          return cb(err);
        }
        if (toString$.call(result != null ? result.result : void 8).slice(8, -1) !== 'Array') {
          return cb("Unexpected result");
        }
        txs = map(transformTx(network))(
        result.result);
        return cb(null, txs);
      });
    });
  };
  getWeb3 = function(network){
    var web3Provider;
    web3Provider = network.api.web3Provider;
    return new Web3(new Web3.providers.HttpProvider(web3Provider));
  };
  getDec = function(network){
    var decimals;
    decimals = network.decimals;
    return Math.pow(10, decimals);
  };
  out$.createTransaction = createTransaction = curry$(function(arg$, cb){
    var network, sender, recepient, amount, amountFee, data, web3, dec, privateKey;
    network = arg$.network, sender = arg$.sender, recepient = arg$.recepient, amount = arg$.amount, amountFee = arg$.amountFee, data = arg$.data;
    web3 = getWeb3(network);
    dec = getDec(network);
    privateKey = new Buffer(sender.privateKey.replace(/^0x/, ''), 'hex');
    return web3.eth.getTransactionCount(sender.address, 'pending', function(err, nonce){
      var toWei, value;
      toWei = function(it){
        return times(it, dec);
      };
      value = toWei(amount);
      return web3.eth.getGasPrice(function(err, gasPrice){
        var gasEstimate, tx, rawtx;
        gasEstimate = div(toWei(amountFee), gasPrice);
        tx = new Tx({
          nonce: toHex(nonce),
          gasPrice: toHex(gasPrice),
          value: toHex(value),
          gas: toHex(gasEstimate),
          to: recepient,
          from: sender.address,
          data: data != null ? data : ""
        });
        tx.sign(privateKey);
        rawtx = '0x' + tx.serialize().toString('hex');
        return cb(null, {
          rawtx: rawtx
        });
      });
    });
  });
  out$.checkDecodedData = checkDecodedData = function(decodedData, data){
    if (!(decodedData != null ? decodedData : "").length === 0) {
      return false;
    }
    if (!(data != null ? data : "").length === 0) {
      return false;
    }
  };
  out$.pushTx = pushTx = curry$(function(arg$, cb){
    var network, rawtx, web3;
    network = arg$.network, rawtx = arg$.rawtx;
    web3 = getWeb3(network);
    return web3.eth.sendSignedTransaction(rawtx, function(err, txid){
      return cb(err, txid);
    });
  });
  out$.getBalance = getBalance = function(arg$, cb){
    var network, address, web3;
    network = arg$.network, address = arg$.address;
    web3 = getWeb3(network);
    return web3.eth.getBalance(address, function(err, number){
      var dec, balance;
      if (err != null) {
        return cb(err);
      }
      dec = getDec(network);
      balance = div(number, dec);
      return cb(null, balance);
    });
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
