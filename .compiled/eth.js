// Generated by LiveScript 1.5.0
(function(){
  var stringify, ref$, filter, map, foldl, each, plus, minus, times, div, get, Web3, Tx, BN, configs, infuraUrl, explorerUrl, apiUrl, dec, web3, toHex, transformTx, getTransactions, createTransaction, checkDecodedData, pushTx, getBalance, out$ = typeof exports != 'undefined' && exports || this;
  stringify = require('qs').stringify;
  ref$ = require('prelude-ls'), filter = ref$.filter, map = ref$.map, foldl = ref$.foldl, each = ref$.each;
  ref$ = require('../math.ls'), plus = ref$.plus, minus = ref$.minus, times = ref$.times, div = ref$.div;
  get = require('superagent').get;
  Web3 = require('web3');
  Tx = require('ethereumjs-tx');
  BN = require('ethereumjs-util').BN;
  configs = {
    ropsten: {
      infuraUrl: 'https://ropsten.infura.io/mOzQovwJN6Kis3TMGltN',
      explorerUrl: 'https://ropsten.etherscan.io',
      apiUrl: 'http://api-ropsten.etherscan.io/api'
    },
    mainnet: {
      infuraUrl: 'https://infura.io/mOzQovwJN6Kis3TMGltN',
      explorerUrl: 'https://etherscan.io',
      apiUrl: 'https://api.etherscan.io/api'
    }
  };
  ref$ = configs['ropsten'], infuraUrl = ref$.infuraUrl, explorerUrl = ref$.explorerUrl, apiUrl = ref$.apiUrl;
  dec = 1000000000000000000;
  web3 = new Web3(new Web3.providers.HttpProvider(infuraUrl));
  toHex = function(it){
    return '0x' + it.toString(16);
  };
  transformTx = function(t){
    var network, tx, amount, time, url, fee;
    network = 'eth';
    tx = t.hash;
    amount = div(t.value, dec);
    time = t.timeStamp;
    url = explorerUrl + "/tx/" + tx;
    fee = div(times(t.cumulativeGasUsed, t.gasPrice), dec);
    return {
      network: network,
      tx: tx,
      amount: amount,
      fee: fee,
      time: time,
      url: url,
      from: t.from,
      to: t.to
    };
  };
  out$.getTransactions = getTransactions = function(arg$, cb){
    var address, module, action, startblock, endblock, sort, apikey, query;
    address = arg$.address;
    module = 'account';
    action = 'txlist';
    startblock = 0;
    endblock = 99999999;
    sort = 'asc';
    apikey = '4TNDAGS373T78YJDYBFH32ADXPVRMXZEIG';
    query = stringify({
      module: module,
      action: action,
      apikey: apikey,
      address: address,
      sort: sort,
      startblock: startblock,
      endblock: endblock
    });
    return get(apiUrl + "?" + query).end(function(err, resp){
      var result, txs;
      if (err != null) {
        return cb(err);
      }
      result = JSON.parse(resp.text);
      txs = map(transformTx)(
      result.result);
      cb(null, txs);
    });
  };
  out$.createTransaction = createTransaction = curry$(function(arg$, cb){
    var sender, recepient, amount, amountFee, data, privateKey;
    sender = arg$.sender, recepient = arg$.recepient, amount = arg$.amount, amountFee = arg$.amountFee, data = arg$.data;
    privateKey = new Buffer(sender.privateKey.replace(/^0x/, ''), 'hex');
    return web3.eth.getTransactionCount(sender.address, 'pending', function(err, nonce){
      var toWei, sendAmount, gasPrice, gasEstimate, tx, rawtx;
      toWei = function(it){
        return times(it, dec);
      };
      sendAmount = minus(amount, amountFee);
      gasPrice = 0.000000004;
      gasEstimate = div(amountFee, gasPrice);
      tx = new Tx({
        nonce: toHex(nonce),
        gasPrice: toHex(toWei(gasPrice)),
        value: toHex(sendAmount),
        gas: toHex(toWei(gasEstimate)),
        to: recepient,
        from: sender.address,
        data: data
      });
      tx.sign(privateKey);
      rawtx = '0x' + tx.serialize().toString('hex');
      cb(null, {
        rawtx: rawtx
      });
    });
  });
  out$.checkDecodedData = checkDecodedData = function(decodedData, data){
    if (!(decodedData != null ? decodedData : "").length === 0) {
      return false;
    }
    if (!(data != null ? data : "").length === 0) {
      return false;
    }
  };
  out$.pushTx = pushTx = curry$(function(arg$, cb){
    var rawtx;
    rawtx = arg$.rawtx;
    console.log(rawtx);
    return web3.eth.sendSignedTransaction(rawtx, function(err, txid){
      console.log(err, txid);
      return cb(err, txid);
    });
  });
  out$.getBalance = getBalance = function(arg$, cb){
    var address, module, action, tag, apikey, query;
    address = arg$.address;
    module = 'account';
    action = 'balance';
    tag = 'latest';
    apikey = '4TNDAGS373T78YJDYBFH32ADXPVRMXZEIG';
    query = stringify({
      module: module,
      action: action,
      tag: tag,
      apikey: apikey,
      address: address
    });
    return get(apiUrl + "?" + query).end(function(err, resp){
      var result, balance;
      result = JSON.parse(resp.text);
      if (err != null) {
        return cb(err);
      }
      balance = div(result.result, dec);
      return cb(null, balance);
    });
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
