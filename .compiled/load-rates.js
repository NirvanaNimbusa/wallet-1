// Generated by LiveScript 1.6.0
(function(){
  var get, ref$, map, groupBy, objToPairs, pairsToObj, flatten, task, run, parseRateString, parseUsdInfo, makeLoader, invalidUrl, createTask, extractVal, modifyItem, setVal, setVals, getData, loadRates, toString$ = {}.toString, slice$ = [].slice;
  get = require('superagent').get;
  ref$ = require('prelude-ls'), map = ref$.map, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, pairsToObj = ref$.pairsToObj, flatten = ref$.flatten;
  ref$ = require('./workflow.ls'), task = ref$.task, run = ref$.run;
  parseRateString = function(usdInfo){
    var ref$, _, url, extract;
    ref$ = usdInfo.match(/url\(([^)]+)\)(.+)?/), _ = ref$[0], url = ref$[1], extract = ref$[2];
    return {
      url: url,
      extract: extract
    };
  };
  parseUsdInfo = function(val){
    switch (toString$.call(val).slice(8, -1)) {
    case 'Object':
      return val;
    case 'String':
      return parseRateString(val);
    case 'Number':
      return {
        val: val
      };
    default:
      return {
        val: 0
      };
    }
  };
  makeLoader = function(wallet){
    var ref$, usdInfo, token, info;
    ref$ = wallet.coin, usdInfo = ref$.usdInfo, token = ref$.token;
    info = parseUsdInfo(usdInfo);
    return import$({
      token: token
    }, info);
  };
  invalidUrl = function(url){
    if (toString$.call(url).slice(8, -1) !== 'String') {
      return true;
    }
    if (url.indexOf('http') !== 0) {
      return true;
    }
    return false;
  };
  createTask = function(arg$){
    var url, items, exec;
    url = arg$[0], items = arg$[1];
    exec = task(function(cb){
      if (invalidUrl(url)) {
        return cb({
          items: items
        });
      }
      return get(url).end(function(err, data){
        return cb({
          err: err,
          data: data,
          items: items
        });
      });
    });
    return [url, exec];
  };
  extractVal = function(data, arg$){
    var head, tail;
    head = arg$[0], tail = slice$.call(arg$, 1);
    if (head == null) {
      return data;
    }
    return extractVal(data[head], tail);
  };
  modifyItem = curry$(function(data, item){
    var val;
    val = extractVal(data.body, item.extract.split('.').splice(1));
    return {
      val: val,
      extract: item.extract,
      token: item.token
    };
  });
  setVal = function(info){
    var url, ref$, err, data, items, modifiedItems;
    url = info[0], ref$ = info[1], err = ref$.err, data = ref$.data, items = ref$.items;
    if (invalidUrl(url)) {
      return info;
    }
    modifiedItems = map(modifyItem(data))(
    items);
    return [
      url, {
        items: modifiedItems
      }
    ];
  };
  setVals = function(res, cb){
    var item;
    item = pairsToObj(
    map(function(it){
      return [it.token, it.val];
    })(
    flatten(
    map(function(it){
      return it[1].items;
    })(
    map(setVal)(
    objToPairs(
    res))))));
    return cb(null, item);
  };
  getData = function(wallets, cb){
    var tasks;
    tasks = pairsToObj(
    map(createTask)(
    objToPairs(
    groupBy(function(it){
      return it.url;
    })(
    map(makeLoader)(
    wallets)))));
    return run([tasks]).then(function(res){
      return setVals(res, cb);
    });
  };
  loadRates = function(store, cb){
    var wallets;
    wallets = store.current.account.wallets;
    return getData(wallets, function(err, rates){
      if (err != null) {
        return cb(err);
      }
      store.rates = rates;
      return cb(null);
    });
  };
  module.exports = loadRates;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
