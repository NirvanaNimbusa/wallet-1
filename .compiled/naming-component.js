// Generated by LiveScript 1.5.0
(function(){
  var react;
  react = require('react');
  module.exports = function(store){
    var price, empty, showMessage, check, resolveRecord, buyNickname, buyNicknameProcess, buyNicknameClick, changeToCustom, enterNick, children;
    price = 0.01;
    empty = function(){
      var ref$;
      return ((ref$ = store.current.nickname) != null ? ref$ : "").length === 0;
    };
    showMessage = function(message){
      return store.current.message = message;
    };
    check = function(cb){
      if (empty()) {
        return typeof cb == 'function' ? cb("Nickname is empty") : void 8;
      }
      if (typeof err != 'undefined' && err !== null) {
        return typeof cb == 'function' ? cb(err) : void 8;
      }
      store.current.checkingName = true;
      return verifyRecord(store.current.nickname, function(err, data){
        var canBuy;
        store.current.checkingName = false;
        if (err != null) {
          return typeof cb == 'function' ? cb(err) : void 8;
        }
        canBuy = data === "";
        store.current.canBuy = canBuy;
        if (canBuy) {
          return typeof cb == 'function' ? cb("Address Not Found") : void 8;
        }
        return typeof cb == 'function' ? cb(null, data) : void 8;
      });
    };
    resolveRecord = function(){
      return check(function(err, data){
        if (err != null) {
          return showMessage(err);
        }
        return showMessage(data);
      });
    };
    buyNickname = function(cb){
      var amountEthers, record, name, this$ = this;
      amountEthers = price;
      record = join(',')(
      map(function(it){
        return it.address;
      })(
      store.current.account.wallets));
      name = store.current.nickname;
      return check(function(err, data){
        if (err != null && err !== "Address Not Found") {
          return cb(err);
        }
        if (err !== "Address Not Found") {
          return cb("Address is already exists");
        }
        return setupRecord({
          name: name,
          record: record,
          amountEthers: amountEthers
        }, function(err){
          if (err === "Does not match") {
            return cb(installRecord(name, record));
          }
          if (err != null) {
            return cb(err);
          }
          return cb(null, "Your name is registered.");
        });
      });
    };
    buyNicknameProcess = function(cb){
      store.current.status = 'buy-nickname';
      return buyNickname(function(err, done){
        if (err != null) {
          return cb(err);
        }
        return cb(null);
      });
    };
    buyNicknameClick = function(event){
      if (store.current.canBuy !== true) {
        return;
      }
      return buyNicknameProcess(function(err, done){
        var ref$;
        store.current.status = 'main';
        if (err != null) {
          return showMessage((ref$ = err.message) != null ? ref$ : err);
        }
        store.current.canBuy = false;
        return showMessage(done);
      });
    };
    changeToCustom = function(){
      return store.current.customDomain = true;
    };
    resolveRecord = function(){
      return check(function(err, data){
        if (err != null) {
          return showMessage(err);
        }
        return showMessage(data);
      });
    };
    enterNick = function(event){
      clearTimeout(state.timeout);
      state.timeout = null;
      store.current.nickname = event.target.value;
      return state.timeout = setTimeout(resolveRecord, 2000);
    };
    return react.createElement('div', {
      className: 'ethnamed-nickname'
    }, children = [
      react.createElement('input', {
        value: store.current.nickname + "",
        placeholder: "nickname",
        onChange: enterNick
      }), react.createElement('span', {
        className: 'rest'
      }, children = !store.current.checkingName
        ? react.createElement('span', {}, children = [
          react.createElement('span', {}, ' .ethnamed.io'), react.createElement('span', {
            onClick: changeToCustom,
            className: 'edit'
          }, children = icon('edit'))
        ])
        : react.createElement('span', {}, ' loading...'))
    ]);
  };
}).call(this);
