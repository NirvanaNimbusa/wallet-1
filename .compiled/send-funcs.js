// Generated by LiveScript 1.6.0
(function(){
  var toJS, ref$, times, minus, createTransaction, pushTx, changeAmount, calcCrypto, notifyFormResult, getNameMask, resolveAddress, ethnamed, window, navigate, close, round, round5, round5edit, getTopupAddress, getPrimaryInfo, createPendingTx, rebuildHistory, map, getAddressLink, getAddressTitle, web3;
  toJS = require('mobx').toJS;
  ref$ = require('./math.ls'), times = ref$.times, minus = ref$.minus;
  ref$ = require('./api.ls'), createTransaction = ref$.createTransaction, pushTx = ref$.pushTx;
  ref$ = require('./calc-amount.ls'), changeAmount = ref$.changeAmount, calcCrypto = ref$.calcCrypto;
  notifyFormResult = require('./send-form.ls').notifyFormResult;
  getNameMask = require('./get-name-mask.ls');
  resolveAddress = require('./resolve-address.ls');
  ethnamed = require('./ethnamed.ls');
  window = require('./browser/window.ls');
  navigate = require('./navigate.ls');
  close = require('./close.ls');
  round = require('./round.ls');
  round5 = require('./round5.ls');
  round5edit = require('./round5edit.ls');
  getTopupAddress = require('./topup-loader.ls').getTopupAddress;
  getPrimaryInfo = require('./get-primary-info.ls');
  createPendingTx = require('./pending-tx.ls').createPendingTx;
  rebuildHistory = require('./transactions.ls').rebuildHistory;
  map = require('prelude-ls').map;
  ref$ = require('./address-link.ls'), getAddressLink = ref$.getAddressLink, getAddressTitle = ref$.getAddressTitle;
  web3 = require('./web3.ls');
  module.exports = function(store){
    var sendTo, send, wallet, color, primaryButtonStyle, defaultButtonStyle, sendTx, performSendSafe, performSendUnsafe, checkEnough, sendMoney, sendEscrow, sendAnyway, sendTitle, cancel, recipientChange, getValue, amountChange, amountUsdChange, encodeDecode, showData, showLabel, whenEmpty, debug, history, topup, network, receive, token, feeToken, ref$, isData, chooseAuto, chooseCheap, chosenCheap, chosenAuto, sendOptions, pending, useMaxAmount;
    if (store == null) {
      return null;
    }
    sendTo = ethnamed(store).sendTo;
    send = store.current.send;
    wallet = send.wallet;
    if (wallet == null) {
      return null;
    }
    color = getPrimaryInfo(store).color;
    primaryButtonStyle = {
      background: color
    };
    defaultButtonStyle = {
      color: color
    };
    sendTx = function(arg$, cb){
      var to, wallet, network, amountSend, amountSendFee, data, coin, txType, token, tx;
      to = arg$.to, wallet = arg$.wallet, network = arg$.network, amountSend = arg$.amountSend, amountSendFee = arg$.amountSendFee, data = arg$.data, coin = arg$.coin, txType = arg$.txType;
      token = send.coin.token;
      tx = {
        account: {
          address: wallet.address,
          privateKey: wallet.privateKey
        },
        recipient: to,
        network: network,
        token: token,
        coin: coin,
        amount: amountSend,
        amountFee: amountSendFee,
        data: data
      };
      return createTransaction(tx, function(err, data){
        var agree;
        if (err != null) {
          return cb(err);
        }
        agree = confirm("Are you sure to send " + tx.amount + " " + send.coin.token + " to " + send.to);
        if (!agree) {
          return cb("You are not agree");
        }
        return pushTx((import$({
          token: token,
          txType: txType,
          network: network
        }, data)), function(err, tx){
          if (err != null) {
            return cb(err);
          }
          return createPendingTx({
            store: store,
            token: token,
            network: network,
            tx: tx,
            amountSend: amountSend,
            amountSendFee: amountSendFee
          }, function(err){
            return cb(err, tx);
          });
        });
      });
    };
    performSendSafe = function(cb){
      return resolveAddress(send.to, send.coin, send.network, function(err, to){
        var ref$;
        send.proposeEscrow = err === "Address not found" && send.coin.token === 'eth';
        if (err != null) {
          return cb(err);
        }
        send.to = to;
        if (err != null) {
          send.error = (ref$ = err.message) != null ? ref$ : err;
        }
        if (err != null) {
          return cb(err);
        }
        return sendTx((import$({
          wallet: wallet
        }, send)), cb);
      });
    };
    performSendUnsafe = function(cb){
      return sendTx((import$({
        wallet: wallet
      }, send)), cb);
    };
    checkEnough = function(cb){
      var amount, ref$;
      amount = minus(minus(minus(wallet.balance, send.amountSend), (ref$ = wallet.pendingSent) != null ? ref$ : 0), send.amountSendFee);
      if (+amount < 0) {
        return cb("Not Enough funds");
      }
      return cb(null);
    };
    sendMoney = function(){
      if (wallet.balance === '...') {
        return;
      }
      if (send.sending === true) {
        return;
      }
      return checkEnough(function(err){
        var ref$;
        if (err != null) {
          return send.error = ((ref$ = err.message) != null ? ref$ : err) + "";
        }
        send.sending = true;
        return performSendSafe(function(err, data){
          var ref$;
          send.sending = false;
          if (err != null) {
            return send.error = ((ref$ = err.message) != null ? ref$ : err) + "";
          }
          notifyFormResult(send.id, null, data);
          store.current.lastTxUrl = send.network.api.url + "/tx/" + data;
          navigate(store, 'sent');
          return web3(store).refresh(function(){});
        });
      });
    };
    sendEscrow = function(){
      var name, amountEthers;
      name = send.to;
      amountEthers = send.amountSend;
      return sendTo({
        name: name,
        amountEthers: amountEthers
      }, function(err){});
    };
    sendAnyway = function(){
      if (send.proposeEscrow) {
        return sendEscrow();
      }
      return sendMoney();
    };
    sendTitle = (function(){
      switch (false) {
      case !send.proposeEscrow:
        return 'SEND (Escrow)';
      default:
        return "Send";
      }
    }());
    cancel = function(event){
      navigate(store, 'wallets');
      return notifyFormResult(send.id, "Cancelled by user");
    };
    recipientChange = function(event){
      var ref$;
      return send.to = (ref$ = event.target.value) != null ? ref$ : "";
    };
    getValue = function(event){
      var value, ref$, value2;
      value = (ref$ = event.target.value.match(/^[0-9]+([.]([0-9]+)?)?$/)) != null ? ref$[0] : void 8;
      value2 = (function(){
        switch (false) {
        case !((value != null ? value[0] : void 8) === '0' && (value != null ? value[1] : void 8) != null && (value != null ? value[1] : void 8) !== '.'):
          return value.substr(1, value.length);
        default:
          return value;
        }
      }());
      return value2;
    };
    amountChange = function(event){
      var value;
      value = getValue(event);
      return changeAmount(store, value);
    };
    amountUsdChange = function(event){
      var value, toSend;
      value = getValue(event);
      toSend = calcCrypto(store, value);
      return changeAmount(store, toSend);
    };
    encodeDecode = function(){
      return send.showDataMode = (function(){
        switch (false) {
        case send.showDataMode !== 'decoded':
          return 'encoded';
        default:
          return 'decoded';
        }
      }());
    };
    showData = function(){
      switch (false) {
      case send.showDataMode !== 'decoded':
        return send.decodedData;
      default:
        return send.data;
      }
    };
    showLabel = function(){
      if (send.showDataMode === 'decoded') {
        return 'encoded';
      } else {
        return 'decoded';
      }
    };
    whenEmpty = function(str, def){
      if ((str != null ? str : "").length === 0) {
        return def;
      } else {
        return str;
      }
    };
    debug = function(cb){
      var token, address, tx, amountSend, amountSendFee;
      token = send.coin.token;
      address = wallet.address;
      tx = "fake tx";
      amountSend = 1;
      amountSendFee = 0.01;
      return createPendingTx({
        store: store,
        token: token,
        network: send.network,
        tx: tx,
        amountSend: amountSend,
        amountSendFee: amountSendFee
      }, function(err){
        return web3(store).refresh(function(){
          console.log('fake', {
            network: network,
            err: err
          });
          return cb(null);
        });
      });
    };
    history = function(){
      store.current.filter = ['IN', 'OUT', send.coin.token];
      return navigate(store, 'history');
    };
    topup = function(){
      var token, network, address;
      token = send.coin.token;
      network = store.current.network;
      address = wallet.address;
      address = getTopupAddress(store, {
        token: token,
        network: network,
        address: address
      });
      if (address != null) {
        return window.open(address);
      } else if (wallet.network.topup) {
        return window.open(wallet.network.topup);
      } else {
        return alert("Topup Service is not installed");
      }
    };
    network = (function(){
      switch (false) {
      case store.current.network !== 'testnet':
        return " (TESTNET) ";
      default:
        return "";
      }
    }());
    receive = function(){
      return navigate(store, 'receive');
    };
    token = send.coin.token.toUpperCase();
    feeToken = ((ref$ = wallet.network.txFeeIn) != null
      ? ref$
      : send.coin.token).toUpperCase();
    isData = ((ref$ = send.data) != null ? ref$ : "").length > 0;
    chooseAuto = function(){
      send.feeType = 'auto';
      return changeAmount(store, send.amountSend);
    };
    chooseCheap = function(){
      send.feeType = 'cheap';
      return changeAmount(store, send.amountSend);
    };
    chosenCheap = send.feeType === 'cheap' ? 'chosen' : "";
    chosenAuto = send.feeType === 'auto' ? 'chosen' : "";
    sendOptions = (ref$ = send.coin.txTypes) != null
      ? ref$
      : [];
    pending = wallet.pendingSent + ' ' + token;
    useMaxAmount = function(){
      var amount, ref$;
      amount = minus(minus(wallet.balance, (ref$ = wallet.pendingSent) != null ? ref$ : 0), send.amountSendFee);
      if (+amount <= 0) {
        return alert("You have no enough funds to send any tx");
      }
      send.amountSend = amount;
      return changeAmount(store, send.amountSend);
    };
    return {
      token: token,
      network: network,
      send: send,
      wallet: wallet,
      pending: pending,
      feeToken: feeToken,
      primaryButtonStyle: primaryButtonStyle,
      recipientChange: recipientChange,
      amountChange: amountChange,
      amountUsdChange: amountUsdChange,
      useMaxAmount: useMaxAmount,
      showData: showData,
      showLabel: showLabel,
      topup: topup,
      history: history,
      receive: receive,
      cancel: cancel,
      sendAnyway: sendAnyway,
      chooseAuto: chooseAuto,
      chooseCheap: chooseCheap,
      chosenAuto: chosenAuto,
      chosenCheap: chosenCheap,
      getAddressLink: getAddressLink,
      getAddressTitle: getAddressTitle,
      defaultButtonStyle: defaultButtonStyle,
      round5edit: round5edit,
      round5: round5,
      sendOptions: sendOptions,
      sendTitle: sendTitle,
      isData: isData,
      encodeDecode: encodeDecode,
      changeAmount: changeAmount
    };
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
