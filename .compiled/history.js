// Generated by LiveScript 1.6.0
(function(){
  var whitebox, transactions, ref$, sortBy, reverse, filter, map, find, moment, getCoins, navigate, toJS, react;
  whitebox = require('whitebox');
  transactions = require('./transactions.ls').transactions;
  ref$ = require('prelude-ls'), sortBy = ref$.sortBy, reverse = ref$.reverse, filter = ref$.filter, map = ref$.map, find = ref$.find;
  moment = require('moment');
  getCoins = require('./plugin-loader.ls').getCoins;
  navigate = require('./navigate.ls');
  toJS = require('mobx').toJS;
  react = require('react');
  module.exports = function(arg$){
    var store, cutTx, ago, date, filt, filterTxs, appliedTransactions, arrow, goBack, extended, cutAmount, amountBeautify, isActive, switchFilter, switchTypeIn, switchTypeOut, coins, children, coin, token, tx, amount, fee, time, url, type;
    store = arg$.store;
    cutTx = function(tx){
      var t, r;
      if (tx == null) {
        return 'none';
      }
      t = tx.toString();
      r = t.substr(0, 4) + '..' + t.substr(tx.length - 25, 10) + '..' + t.substr(t.length - 4, 4);
      return r.toUpperCase();
    };
    ago = function(time){
      return moment(time * 1000).fromNow();
    };
    date = function(time){
      return moment(time * 1000).format();
    };
    filt = store.current.filter;
    filterTxs = function(tx){
      var type, token;
      type = tx.type, token = tx.token;
      return in$(type, filt) && in$(token, filt);
    };
    appliedTransactions = reverse(
    sortBy(function(it){
      return it.time;
    })(
    filter(filterTxs)(
    transactions)));
    arrow = function(type){
      switch (false) {
      case type !== 'IN':
        return "INC";
      default:
        return "OUT";
      }
    };
    goBack = function(){
      return navigate(store, 'wallets');
    };
    extended = function(str){
      switch (false) {
      case !(str.indexOf('.') > -1):
        return str + "0";
      default:
        return str + ".0";
      }
    };
    cutAmount = function(amount, max){
      var str, res;
      str = (amount != null ? amount : "").toString();
      res = (function(){
        switch (false) {
        case str.length !== max:
          return str;
        case !(str.length >= max):
          return str.substr(0, max - 1) + "..";
        default:
          return cutAmount(extended(str), max);
        }
      }());
      return res;
    };
    amountBeautify = function(amount, max){
      var str, data, children, _, first, last;
      str = cutAmount(amount, max);
      data = str.match(/(.+[^0])(0+)$/);
      if (data == null) {
        return react.createElement('div', {
          className: 'balance'
        }, children = react.createElement('span', {
          className: 'color'
        }, ' ' + str));
      }
      _ = data[0], first = data[1], last = data[2];
      return react.createElement('span', {
        className: 'balance'
      }, children = [
        react.createElement('span', {
          className: 'color'
        }, ' ' + first), react.createElement('span', {
          className: 'rest'
        }, ' ' + last)
      ]);
    };
    isActive = function(value){
      if (in$(value, filt)) {
        return 'active';
      } else {
        return '';
      }
    };
    switchFilter = curry$(function(value, event){
      if (!in$(value, filt)) {
        return filt.push(value);
      } else {
        return filt.splice(filt.indexOf(value), 1);
      }
    });
    switchTypeIn = switchFilter('IN');
    switchTypeOut = switchFilter('OUT');
    coins = getCoins();
    return react.createElement('div', {
      className: 'normalheader history history798548141'
    }, children = [
      react.createElement('div', {
        className: 'header'
      }, children = [
        react.createElement('button', {
          onClick: goBack
        }, ' < '), react.createElement('span', {
          className: 'separator'
        }), react.createElement('button', {
          onClick: switchTypeIn,
          className: isActive('IN') + ""
        }, ' IN'), react.createElement('button', {
          onClick: switchTypeOut,
          className: isActive('OUT') + ""
        }, ' OUT'), react.createElement('span', {
          className: 'separator'
        }), (function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = coins).length; i$ < len$; ++i$) {
            coin = ref$[i$];
            results$.push(react.createElement('button', {
              key: coin.token + "",
              onClick: switchFilter(coin.token),
              className: isActive(coin.token) + ""
            }, children = react.createElement('img', {
              src: coin.image + ""
            })));
          }
          return results$;
        }())
      ]), react.createElement('div', {}, children = [
        react.createElement('div', {
          className: 'table'
        }, children = (function(){
          var i$, ref$, len$, ref1$, results$ = [];
          for (i$ = 0, len$ = (ref$ = appliedTransactions).length; i$ < len$; ++i$) {
            ref1$ = ref$[i$], token = ref1$.token, tx = ref1$.tx, amount = ref1$.amount, fee = ref1$.fee, time = ref1$.time, url = ref1$.url, type = ref1$.type;
            coin = find(fn$)(
            coins);
            results$.push(react.createElement('div', {
              key: tx + "",
              className: type + " record"
            }, children = [
              react.createElement('div', {
                className: 'cell text-center network'
              }, children = [
                react.createElement('div', {}, children = react.createElement('img', {
                  src: coin.image + ""
                })), react.createElement('div', {
                  className: 'direction'
                }, ' ' + arrow(type))
              ]), react.createElement('div', {
                className: 'cell txhash'
              }, children = [
                react.createElement('a', {
                  href: url + "",
                  target: "_blank"
                }, ' ' + cutTx(tx)), react.createElement('div', {
                  className: 'gray'
                }, ' ' + ago(time))
              ]), react.createElement('div', {
                className: 'cell amount'
              }, children = [
                react.createElement('div', {
                  title: amount + ""
                }, ' '), amountBeautify(amount, 8), react.createElement('div', {
                  className: 'gray'
                }, children = [
                  react.createElement('span', {
                    className: 'fee'
                  }, ' Fee '), amountBeautify(fee, 10)
                ])
              ])
            ]));
          }
          return results$;
          function fn$(it){
            return it.token === token;
          }
        }())), appliedTransactions.length === 0 ? react.createElement('div', {
          className: 'nothin-to-show'
        }, ' Nothing to show') : void 8
      ])
    ]);
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
