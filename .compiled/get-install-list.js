// Generated by LiveScript 1.6.0
(function(){
  var localStorage, ref$, any, map, ask, refreshAccount, requiredFields, notIn, verifyPlugin, getRegistry, getPlugin, getInstallList, saveRegistry, addToRegistry, removeFromRegistry, buildName, installPlugin, uninstallPlugin, askUser, buildInstall, buildUninstall, toString$ = {}.toString, out$ = typeof exports != 'undefined' && exports || this;
  localStorage = require('localStorage');
  ref$ = require('prelude-ls'), any = ref$.any, map = ref$.map;
  ask = require('./modal.ls').ask;
  refreshAccount = require('./refresh-account.ls');
  requiredFields = ['type', 'token', 'enabled'];
  notIn = function(arr, arr2){
    return any(function(it){
      return arr2.indexOf(it) === -1;
    })(
    arr);
  };
  verifyPlugin = function(plugin, cb){
    if (toString$.call(plugin).slice(8, -1) !== 'Object') {
      return cb("Expected Object");
    }
    if (notIn(requiredFields, Object.keys(plugin))) {
      return cb("Required fields: " + requiredFields.join(', '));
    }
    return cb(null);
  };
  getRegistry = function(){
    var registryString, ref$;
    registryString = (ref$ = localStorage.getItem('plugin-registry')) != null ? ref$ : "[]";
    console.log(registryString);
    return JSON.parse(registryString);
  };
  getPlugin = function(name){
    var item;
    item = localStorage.getItem(name);
    if (toString$.call(item).slice(8, -1) !== 'String') {
      return null;
    }
    return JSON.parse(item);
  };
  out$.getInstallList = getInstallList = function(){
    return map(getPlugin)(
    getRegistry());
  };
  saveRegistry = function(registry){
    var resultedString;
    resultedString = JSON.stringify(registry);
    return localStorage.setItem(name, resultedString);
  };
  addToRegistry = function(name){
    var registry;
    registry = getRegistry();
    if (registry.indexOf(name) > -1) {
      return;
    }
    registry.push(name);
    return saveRegistry(registry);
  };
  removeFromRegistry = function(name){
    var registry, index;
    registry = getRegistry();
    index = registry.indexOf(name) === -1;
    if (index === -1) {
      return;
    }
    registry.splice(index, 1);
    return saveRegistry(registry);
  };
  buildName = function(token){
    return "plugin-" + token;
  };
  installPlugin = function(plugin, cb){
    return verifyPlugin(plugin, function(err){
      var name, body;
      if (err != null) {
        return cb(err);
      }
      name = buildName(plugin.token);
      body = JSON.stringify(plugin);
      localStorage.setItem(name, body);
      addToRegistry(name);
      return cb(null);
    });
  };
  uninstallPlugin = function(token, cb){
    var name;
    if (toString$.call(name).slice(8, -1) !== 'String') {
      return cb("expected string argument");
    }
    name = buildName(token);
    localStorage.setItem(name, "");
    removeFromRegistry(name);
    return cb(null);
  };
  askUser = function(cweb3, store, plugin, cb){
    var registry;
    registry = getRegistry();
    if (toString$.call(plugin).slice(8, -1) !== 'Object') {
      return cb("pluing is required");
    }
    if (toString$.call(cb).slice(8, -1) !== 'Function') {
      return cb("callback is required");
    }
    if (registry.indexOf(plugin.token) === -1) {
      return ask(store, "Would you like to install " + plugin.type + " `" + plugin.token + "` ?", cb);
    }
    return ask(store, "Would you like to replace the current plugin with new `" + plugin.token + "` ?", cb);
  };
  out$.buildInstall = buildInstall = function(cweb3, store){
    return function(plugin, cb){
      if (store.current.page === 'locked') {
        return cb("Please unlock the wallet");
      }
      return verifyPlugin(plugin, function(err){
        if (err != null) {
          return cb(err);
        }
        return askUser(cweb3, store, plugin, function(err){
          if (err != null) {
            return cb(err);
          }
          return installPlugin(plugin, function(err){
            if (err != null) {
              return cb(err);
            }
            return refreshAccount(cweb3, store, function(err){
              if (err != null) {
                return cb(err);
              }
              return cb(null);
            });
          });
        });
      });
    };
  };
  out$.buildUninstall = buildUninstall = function(cweb3, store){
    return function(name, cb){
      return uninstallPlugin(name, cb);
    };
  };
}).call(this);
